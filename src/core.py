# -*- coding: utf-8 -*-
import asyncio
import json
import urllib
import ssl
import telebot


from abstract import AbstractCore
from loging import logging
from services import Shooter, ValidateUrl, Statistic
from env import *
from aiohttp import web
from telebot.async_telebot import AsyncTeleBot
from telebot import types
from decor import exception, info_log_message_async, info_log_message_async_callback

from PostgreSQL import PostgreSQL

app = web.Application()


class Core(AbstractCore):
    """ –Ø–¥—Ä–æ –±–æ—Ç–∞. –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
        –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –∏–∑ —á–∞—Ç–∞ –∏ –∑–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫
        """

    def __init__(self):
        self.bot = AsyncTeleBot(token)

        @self.bot.message_handler(commands=['start'])
        @exception
        async def _command_start(message: telebot.types.Message or telebot.types.CallbackQuery):
            """–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /start"""
            await self.process_comand_start(message)

        @self.bot.message_handler(commands=['admin'])
        @exception
        async def _command_admin(message: telebot.types.Message or telebot.types.CallbackQuery):
            """–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /admin"""

            await self.process_comand_admin(message)

        @self.bot.message_handler(commands=['setadminchat'])
        @exception
        async def _command_set_admin_chat(message: telebot.types.Message or telebot.types.CallbackQuery):
            """–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /setadminchat"""

            await self.process_set_admin_chat(message)

        @self.bot.message_handler(commands=['statistic'])
        @exception
        async def _command_statistic(message: telebot.types.Message or telebot.types.CallbackQuery):
            """–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /statistic"""

            await self.process_get_statistic(message)

        @self.bot.message_handler(func=lambda message: True, content_types=['text'])
        @exception
        async def _check_text_and_get_screen(message: telebot.types.Message):
            """–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            await self.process_check_text_and_get_screen(message)

        @self.bot.callback_query_handler(func=lambda c: True)
        @exception
        @info_log_message_async_callback
        async def process_callback_btn(callback_query: types.CallbackQuery):
            """–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ü–æ–¥—Ä–æ–±–Ω–µ–µ.
                –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–∞–π—Ç–µ —Å free API –æ–¥–Ω–æ–≥–æ –∏–∑ WHOIS —Å–µ—Ä–≤–∏—Å–æ–≤
                –∏ –≤—ã–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            """

            callback_data = callback_query.data
            url_ip = f'http://ip-api.com/json/{callback_data}?fields=query,continent,country,city,isp,org'
            getinfo = urllib.request.urlopen(url_ip)
            data = json.load(getinfo)
            ip = data['query']
            continent = data['continent']
            country = data['country']
            city = data['city']
            isp = data['isp']
            org = data['org']

            await self.bot.answer_callback_query(callback_query.id,
                                                 text=f'IP: {ip}\n \n'
                                                      f'–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç: {continent}\n'
                                                      f'–°—Ç—Ä–∞–Ω–∞: {country}\n'
                                                      f'–ì–æ—Ä–æ–¥: {city}\n \n'
                                                      f'–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {isp}\n'
                                                      f'–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {org}\n',
                                                 show_alert=True)

    @info_log_message_async
    @exception
    async def process_comand_start(self, message: telebot.types.Message):
        """–ú–µ—Ç–æ–¥ –∫–æ–º–∞–Ω–¥—ã /start
            –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ –æ–æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º.
            –ü–æ—Å—ã–ª–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–Ω—Ñ —Å–æ–æ–±—â–µ–Ω–∏–µ
            """
        db_worker = PostgreSQL()
        if not db_worker.set_user_info_in_db(message):
            db_worker.update_user_in_db(message)

        await self.bot.send_message(message.chat.id,
                                    f'üëãüèª –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç Jpeger. –Ø - –ë–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-—Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.'
                                    f'–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ URL –∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, wikipedia.org \n'
                                    f'‚Ä¢ –° –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏. '
                                    f'(–ê–π–ø–∏–ª–æ–≥–≥–µ—Ä—ã, —Ñ–∏—à–∏–Ω–≥–æ–≤—ã–µ –≤–µ–±-—Å–∞–π—Ç—ã, —Å–∫—Ä–∏–º–µ—Ä—ã –∏ —Ç.–ø)\n'
                                    f'‚Ä¢ –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ —Å–≤–æ–∏ —á–∞—Ç—ã, –∏ —è —Å–º–æ–≥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Å—ã–ª–∫–∏, '
                                    f'–∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')

    @info_log_message_async
    @exception
    async def process_comand_admin(self, message: telebot.types.Message):
        """

        :param message: telebot.types.Message
        :return:
        –ú–µ—Ç–æ–¥ –∫–æ–º–∞–Ω–¥—ã /admin
        –ï—Å–ª–∏ –∞–¥–º–∏–Ω —á–∞—Ç–∞ –Ω–µ—Ç, —Ç–æ –ø—Ä–µ–ª–∞–≥–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–∏—Ç—å
        –ï—Å–ª–∏ –µ—Å—Ç—å –∏ –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –∞–¥–º–∏–Ω —á–∞—Ç–µ, —Ç–æ –≤—ã–¥–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∞
        –ï—Å–ª–∏ –µ—Å—Ç—å –∏ —á–∞—Ç –Ω–µ –∞–ª–º–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç


        """
        db_worker = PostgreSQL()
        admin_chat_id = db_worker.get_admin_chat_id()
        if not admin_chat_id:
            await self.bot.send_message(message.chat.id, f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –µ—â–µ –Ω–µ—Ç.\n'
                                                         f'–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç —á–∞—Ç —á–∞—Ç–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞,'
                                                         f' –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /setadminchat')
            return
        if admin_chat_id[0][0] == message.chat.id:
            await self.bot.send_message(message.chat.id,
                                        f'/statistic - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ \n'
                                        )

    @info_log_message_async
    @exception
    async def process_set_admin_chat(self, message: telebot.types.Message):
        """
        –ù–∞–∑–Ω–∞—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —á–∞—Ç —á–∞—Ç–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω
        """
        db_worker = PostgreSQL()

        if db_worker.set_admin_chat_in_db(message):

            await self.bot.send_message(message.chat.id,
                                        f'–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π, –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ \n'
                                        f'–î–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–∞–Ω–¥ /admin')
        else:
            await self.bot.send_message(message.chat.id,
                                        f'–£ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π —á–∞—Ç')

    @info_log_message_async
    @exception
    async def process_get_statistic(self, message: telebot.types.Message):
        """

        :param message: telebot.types.Message
        :return:

        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–µ–¥–∞–µ—Ç –µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        db_worker = PostgreSQL()
        try:
            statistic = Statistic(db_worker)
            get_statistic = statistic.get_statistic_for_admin()
            await self.bot.send_message(message.chat.id, get_statistic)
        except TypeError:
            await self.bot.send_message(message.chat.id, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞')
    @info_log_message_async
    @exception
    async def process_check_text_and_get_screen(self, message: telebot.types.Message):
        """

        :param message: telebot.types.Message
        :return:
        –ü—Ä–∞–≤–µ—Ä—è–µ—Ç –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL (—Å –ø–æ–º–æ—â—å—é django opensource —Å–ª–µ–≥–∫–∞ –¥–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ)
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–∏–∫—Ä–µ–ø–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∫–Ω–æ–ø–∫—É WHOIS
        –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (–∫ –ø—Ä–∏–º–µ—Ä—É timeout 30000ms)
        –ï—Å–ª–∏ —Ç–µ—Å–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è URL —Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—å–∑–æ–≤–∞—Ç–µ–ª–µ
        db_worker = PostgreSQL()
        db_worker.update_user_in_db(message)

        validation_url = ValidateUrl(message.text)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
        if validation_url.validate():
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞ –∏–∑ URL
            domen = validation_url.parse_url()
            # –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            send_message = await self.bot.send_message(message.chat.id,
                                                       u'\U000026A1' + 'Ô∏è_–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–∞–π—Ç..._',
                                                       reply_to_message_id=message.message_id, parse_mode="Markdown")
            shooter = Shooter()
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –°–∫—Ä–∏–Ω–∞ –∏ —Å–æ–ø—É—Ç—Å–≤—É–µ—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: –∏–º—è —Ñ–∞–π–ª–∞, –ø—É—Ç—å, –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            filename, file_path, title, duration = await shooter.get_screen_and_save_page(message, validation_url.url,
                                                                                          domen)
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
            if shooter._error:
                # –û–¢–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
                img = open('animation.gif.mp4', 'rb')
                await self.bot.send_video(message.chat.id, img)
                img.close()
                await self.bot.send_message(message.chat.id, f'*–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞*',
                                            parse_mode="Markdown")
                await self.bot.delete_message(message.chat.id, message_id=send_message.message_id)
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ—É –≤ –±–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                db_worker.set_statistic_succses_false(message, validation_url.url, domen, filename, file_path, duration)

                return
            # –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω –∏–Ω—Ñ—É –∏ –∫–Ω–æ–ø—É
            with open(file_path, 'rb') as file:
                markup = types.InlineKeyboardMarkup(row_width=1)
                button = types.InlineKeyboardButton(u'\U0001F52C' + ' –ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data=str(domen))
                markup.add(button)
                await self.bot.send_photo(message.chat.id, file, caption=f'{title} \n'
                                                                         f'\n'
                                                                         f'<b>–í–µ–±-—Å–∞–π—Ç:</b> {validation_url.url} \n'
                                                                         f'\n'
                                                                         f'<b>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏</b>: {int(duration)} —Å–µ–∫—É–Ω–¥',
                                          reply_markup=markup,
                                          parse_mode='HTML')

            await self.bot.delete_message(message.chat.id, message_id=send_message.message_id)
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ—É –≤ –±–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            db_worker.set_statistic_succses_true(message, validation_url.url, domen, filename, file_path, duration)

    @info_log_message_async
    @exception
    async def get_data(self, request):
        """

        :param request:
        :return:
        –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –¥–ª—è –±–æ—Ç–∞
        """
        if request.match_info.get('token') == self.bot.token:
            request_body_dict = await request.json()
            update = telebot.types.Update.de_json(request_body_dict)
            await self.bot.process_new_updates([update])
            return web.Response()
        else:
            return web.Response(status=403)

    @exception
    async def run(self):
        """

        :return:
        –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ polling
        """
        await self.bot.remove_webhook()

        await self.bot.polling(non_stop=True, skip_pending=True, timeout=40, request_timeout=40)  # to skip updates

    @exception
    def run_webhook(self):
        """
        –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ webhooks
        """
        self.bot.set_webhook(url=WEBHOOK_URL_BASE + WEBHOOK_URL_PATH,
                             certificate=open(WEBHOOK_SSL_CERT, 'r'))

        # Build ssl context
        context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
        context.load_cert_chain(WEBHOOK_SSL_CERT, WEBHOOK_SSL_PRIV)

        # Start aiohttp server
        web.run_app(
            app,
            host=WEBHOOK_LISTEN,
            port=WEBHOOK_PORT,
            ssl_context=context,
        )


app.router.add_post('/{token}/', Core().get_data)
# –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
if webhook is True:
    core = Core()
    core.run_webhook()

else:
    if __name__ == '__main__':
        core = Core()
        asyncio.run(core.run())
